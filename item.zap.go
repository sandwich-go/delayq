// Code generated by protokitgo. DO NOT EDIT.
package delayq

import "go.uber.org/zap/zapcore"
import "strconv"

var _ = strconv.IntSize

var ZapLogMarshalItem func(zapcore.ObjectEncoder, *Item) error

type ZapArrayItem []*Item

func (x ZapArrayItem) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntItem map[int]*Item

func (x ZapMapIntItem) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32Item map[int32]*Item

func (x ZapMapInt32Item) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64Item map[int64]*Item

func (x ZapMapInt64Item) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringItem map[string]*Item

func (x ZapMapStringItem) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32Item map[uint32]*Item

func (x ZapMapUint32Item) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64Item map[uint64]*Item

func (x ZapMapUint64Item) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *Item) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalItem != nil {
		return ZapLogMarshalItem(e, x)
	}
	if x == nil {
		return
	}
	e.AddString("Topic", x.Topic)
	e.AddInt64("DelaySecond", x.DelaySecond)
	e.AddByteString("Value", x.Value)
	return
}
