// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package delayq

import (
	"fmt"

	"github.com/prometheus/client_golang/prometheus"
)

// Options should use newConfig to initialize it
type Options struct {
	// annotation@Name(comment="名称")
	Name string
	// annotation@Prefix(comment="前缀")
	Prefix string
	// annotation@RedisScriptBuilder(comment="redis 脚本工厂")
	RedisScriptBuilder RedisScriptBuilder
	// annotation@RetryTimes(comment="重试次数")
	RetryTimes int
	// annotation@OnDeadLetter(comment="当有死信")
	OnDeadLetter func(item *Item)
	// annotation@MonitorCounter(comment="监控统计函数")
	MonitorCounter func(metric string, value int64, labels prometheus.Labels)
}

// newConfig new Options
func newConfig(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		opt(cc)
	}
}

// Option option func
type Option func(cc *Options)

// WithName 名称
func WithName(v string) Option {
	return func(cc *Options) {
		cc.Name = v
	}
}

// WithPrefix 前缀
func WithPrefix(v string) Option {
	return func(cc *Options) {
		cc.Prefix = v
	}
}

// WithRedisScriptBuilder redis 脚本工厂
func WithRedisScriptBuilder(v RedisScriptBuilder) Option {
	return func(cc *Options) {
		cc.RedisScriptBuilder = v
	}
}

// WithRetryTimes 重试次数
func WithRetryTimes(v int) Option {
	return func(cc *Options) {
		cc.RetryTimes = v
	}
}

// WithOnDeadLetter 当有死信
func WithOnDeadLetter(v func(item *Item)) Option {
	return func(cc *Options) {
		cc.OnDeadLetter = v
	}
}

// WithMonitorCounter 监控统计函数
func WithMonitorCounter(v func(metric string, value int64, labels prometheus.Labels)) Option {
	return func(cc *Options) {
		cc.MonitorCounter = v
	}
}

// InstallOptionsWatchDog the installed func will called when newConfig  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithName("delayq"),
		WithPrefix("__dq"),
		WithRedisScriptBuilder(nil),
		WithRetryTimes(10),
		WithOnDeadLetter(func(item *Item) {
			fmt.Println("got dead letter, ", item)
		}),
		WithMonitorCounter(func(metric string, value int64, labels prometheus.Labels) {
		}),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *Options) GetName() string                           { return cc.Name }
func (cc *Options) GetPrefix() string                         { return cc.Prefix }
func (cc *Options) GetRedisScriptBuilder() RedisScriptBuilder { return cc.RedisScriptBuilder }
func (cc *Options) GetRetryTimes() int                        { return cc.RetryTimes }
func (cc *Options) GetOnDeadLetter() func(item *Item)         { return cc.OnDeadLetter }
func (cc *Options) GetMonitorCounter() func(metric string, value int64, labels prometheus.Labels) {
	return cc.MonitorCounter
}

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetName() string
	GetPrefix() string
	GetRedisScriptBuilder() RedisScriptBuilder
	GetRetryTimes() int
	GetOnDeadLetter() func(item *Item)
	GetMonitorCounter() func(metric string, value int64, labels prometheus.Labels)
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option)
}
